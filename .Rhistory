markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
# sumMarkerLm = summary(markerLm)
# sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
# if(sumMarkerLmPvalue <= .0){
#
#   #cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#
#   #markerList[[length(markerList)+1]] = j
#
#   j
#
# }
# #rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
#gc()
}
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
summary(markerLm)
#
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.001){
#
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#
#   #markerList[[length(markerList)+1]] = j
#
j
#
}
# #rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
#gc()
#
#
}
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
cores=parallel::detectCores()
cl <- parallel::makeCluster(cores[1]-4, outfile="")
doParallel::registerDoParallel(cl)
cl
#
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.001){
#
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#
#   #markerList[[length(markerList)+1]] = j
#
j
#
}
# #rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
#gc()
#
#
}
markerData=foreach(j=colnames(trainingx2)[2950:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
markerData
colnames(trainingx2)[1:50]
stopCluster(cl)
cl <- parallel::makeCluster(cores[1]-2, outfile="")
cores=parallel::detectCores()
cl <- parallel::makeCluster(cores[1]-2, outfile="")
doParallel::registerDoParallel(cl)
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.001){
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
j
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
markerData=foreach(j=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
markerData = data.frame(markers = markerData)
View(markerData)
rm(markerData, trainingMarkers)
gc()
j
#markerList = list()
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.001){
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue,i )
invisible(gc())
}
markerData=foreach(j=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
markerData = data.frame(markers = markerData)
View(markerData)
#markerList = list()
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.001){
#cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue,i )
}
markerData=foreach(j=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
?lm
anova(markerLM)
anova(markerLm)
summary(markerLm)
#markerList = list()
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue <= 0.00000000000000001){
#cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue,i )
}
markerData=foreach(j=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
j
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
summary(markerLm)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue == 0){
#cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
#
if(sumMarkerLmPvalue == 0){
print(j)
#cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
gc()
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
#
if(sumMarkerLmPvalue == 0){
#print(j)
#cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#   #markerList[[length(markerList)+1]] = j
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue,i )
}
markerData=foreach(j=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
#for( j in colnames(trainingx2)[46:ncol(trainingx2)]  ){
a = markerSelect(trainingx2 =trainingx2 ,markerList=markerList,j=j )
a
}
trainingMarkers = trainingx2[, colnames(markerData)]
trainingx3 = data.frame(trainingx2[ ,1:45], trainingMarkers)
colnames(markerData)
markerData
trainingMarkers = trainingx2[, (markerData)]
trainingx3 = data.frame(trainingx2[ ,1:45], trainingMarkers)
View(trainingx3)
rm(markerData, trainingMarkers)
gc()
datasets = trainVal(data = trainingx3, colToInd= "ID", sample = 0.95)
gc()
trainx2 = na.omit((datasets[[1]])[, -c(1:35) ])
validatex2 =na.omit( datasets[[2]][, -c(1:35) ] )
rm(datasets,trainingx3)
gc()
View(trainx2)
final_grid3 <- expand.grid(nrounds = rounds, eta = eta, lambda = lambda, alpha=alpha)
final_grid3 <- expand.grid(nrounds = 3000, eta = 1, lambda = 0.0003, alpha=0.0003)
#trainx2$norm = (trainx2$Yield - mean(trainx2$Yield))/(max(trainx2$Yield)-min(trainx2$Yield))
gc()
models.list2 <- caretEnsemble::caretList(
x=as.matrix(trainx2[, -c(ncol(trainx2))  ] ),
y=(trainx2[,ncol(trainx2)]),
continue_on_fail = T,
trControl=caret::trainControl(method="cv",
number=1, #1
index = createFolds((trainx2[,ncol(trainx2)]),k=2), #2
savePredictions = TRUE,
#classProbs=T,
allowParallel = TRUE,
verboseIter = TRUE
# preProcOptions =list(
#  # method = c("knnImpute"),
#   k = 7,
#   knnSummary = mean)
#na.remove = TRUE #method = c("center", "scale"))
# outcome = NULL,
# fudge = 0.2,
# numUnique = 3,
# verbose = FALSE,
# freqCut = 95/5,
# uniqueCut = 10,
#cutoff = 0.9)
# rangeBounds = c(0, 1))
#p=.75
# seeds=c(1,2,3,4,5,6,7,8,9),
# indexFinal = length(sample(nrow(trainx2), (nrow(trainx2))*.3))
),
tuneList=list(
#  qrf1=caretModelSpec(method="qrf", ntree=500, tuneLength = 1), #11
#  qrf2=caretModelSpec(method="qrf", ntree=7, tuneLength = 1), #11
#  qrf3=caretModelSpec(method="qrf", ntree=10, tuneLength = 1), #9
# # #qrf4=caretModelSpec(method="qrf", ntree = 150, tuneLength = 1), #7
#qrf5=caretModelSpec(method="qrf", ntree=10, tuneLength = 1), #5
#qrf6=caretModelSpec(method="xgbLinear", tuneGrid = final_grid2), #5
#qrf5=caretModelSpec(method="qrf",ntree=10, tuneLength = 1), #5
#qrf6=caretModelSpec(method="xgbLinear", tuneGrid = final_grid2), #5
qrf7=caretEnsemble::caretModelSpec(method="xgbLinear", tuneGrid = final_grid3) #5
#qrf8=caretEnsemble::caretModelSpec(method="xgbLinear", tuneGrid = final_grid4) #5
#qrf9=caretModelSpec(method="BstLm") #5
#qrf8=caretModelSpec(method="cubist") #5
# qrf6=caretModelSpec(method="qrf", ntree=2, tuneLength = 1) #5
)
# ),
# methodList = c(
#   "cubist",
#   "xgbLinear"
#
# )
)
invisible(gc())
models.list2
NCAA.stacked<-caretEnsemble::caretEnsemble(models.list2, # + 95
trControl = caret::trainControl(
number=2,
method="boot",
verboseIter =TRUE,
allowParallel = T
)
);NCAA.stacked # + 95
invisible(gc())
#######Validate Corn
plot(caret::varImp(models.list2$qrf7, scale=T))
#######Validate Cor
(caret::varImp(models.list2$qrf7, scale=T)
preds = predict(NCAA.stacked, validatex2[,-c(300:ncol(validatex2))])
cat("r2 for Validate ALL is: ",cor(validatex2[, ncol(validatex2)], preds)^2, "\n")
cat("rmse for Validate ALL is: ",sqrt(mean((validatex2[, ncol(validatex2)] -  preds)^2)), "\n")
hist(preds, main= paste0(name))
plot(preds, validatex2[,ncol(validatex2)], col = c("red","blue"), main = paste0(name))
#######training set
preds.t = predict(NCAA.stacked, trainx2[,-c(11:ncol(trainx2))])
cat("r2 for Train ALL is: ",cor(trainx2[, ncol(trainx2)], preds.t)^2, "\n")
cat("rmse for Train ALL is: ",sqrt(mean((trainx2[, ncol(trainx2)] -  preds.t)^2)), "\n")
hist(preds.t, main= paste0(name))
plot(preds.t, trainx2[,ncol(trainx2)], col = c("red","blue"), main = paste0(name))
#######AProp set
ap.prop = na.omit( BV.HSIdentical.df[,-c(1:35) ] )
preds.ap = predict(NCAA.stacked, ap.prop[,-c(11:ncol(ap.prop))])
cat("r2 for Prop and A level is: ",cor(ap.prop[,ncol(ap.prop)], preds.ap)^2, "\n")
cat("rmse for Prop and A level is: ", sqrt(mean((ap.prop[,ncol(ap.prop)] -  preds.ap)^2)), "\n")
#sqrt(mean((ap.prop[,8] -  preds.ap)^2))
hist(preds.ap, main= paste0(name))
plot(preds.ap, ap.prop[,ncol(ap.prop)], col = c("red","blue"), main = paste0(name))
preds.ap = data.table(ap.prop[,-ncol(ap.prop)], preds.ap)
preds.test.agg.FEMALE = preds.ap %>%
dplyr::group_by(female) %>%
dplyr::summarize(preds.ap = mean(preds.ap))
preds.test.agg.MALE = preds.ap %>%
dplyr::group_by(male) %>%
dplyr::summarize(preds.ap = mean(preds.ap))
preds.test.agg.FEMALE = dplyr::left_join(preds.test.agg.FEMALE, female.2[,-2],by=c("female"="num"))
preds.test.agg.MALE = dplyr::left_join(preds.test.agg.MALE, male.2[,-2],by=c("male"="num"))
colnames(preds.test.agg.MALE) = c("female", "preds.ap", "FEMALE")
preds.test.agg = rbind(preds.test.agg.FEMALE, preds.test.agg.MALE)
preds.test.agg = preds.test.agg %>%
dplyr::group_by(FEMALE) %>%
dplyr::summarize(preds.ap = mean(preds.ap))
#dplyr::mutate(BV = (preds.ap - 228)/2 )
hist(preds.test.agg$preds.ap, main= paste0(name))
#biplot(preds.test.agg$FEMALE, preds.test.agg$BV)
# preds.test.agg.index.female = order(preds.test.agg$FEMALE)
# preds.test.agg = preds.test.agg[preds.test.agg.index.female,]
preds.test.agg.index.trait = order(preds.test.agg$preds.ap, decreasing = T)
preds.test.agg = preds.test.agg[preds.test.agg.index.trait,]
preds.test.agg = data.frame(preds.test.agg)
#ggplot(data=preds.test.agg, aes(x=reorder(FEMALE, preds.ap), y=preds.ap)) +  geom_line("identity")
# rm(id.unk.all,df5,Blup, datasets, aprop,id.unk, preds.ap, id, preds.t, preds, models.list2,trainingx2,variety,
#    BV.HSIdentical.df.3, male.3, validatex2, trainx2, BV.HSIdentical.df)
# gc()
#######expand.grind set male.female.year
rm(trainx2, validatex2,ap.prop)
gc()
cat("Predicting A and Prop test level for all combinations over Years, Locations, Male, Female", "\n")
preds.test = predict(NCAA.stacked, testx2[,c(6,3,4,2,5,1,7,8,9,10)])
hist(preds.test, main= paste0(name))
#filter(preds.test > 250)
# preds.test.bind.2 = preds.test.bind[,c(1,3,2,4,5,6,7)]
# colnames(preds.test.bind.2)[c(2,3)] = c("MALE","FEMALE")
# #
# BV.HSIdentical.df.3 = rbind(preds.test.bind.2,preds.test.bind)
# BV.HSIdentical.df.3 = data.frame(BV.HSIdentical.df.3)
gc()
preds.test = data.table(testx2, preds.test)
gc()
preds.test.bind = preds.test %>%
dplyr::left_join( Year.2[,-2],by=c("Year"="num")) %>%
dplyr::group_by(field, ID) %>%
dplyr::summarize(preds.test = mean(preds.test)) %>%
dplyr::select(preds.test) %>%
data.frame()
hist(preds.test$preds.test, main= paste0(name))
# preds.test.agg.FEMALE = preds.test.bind %>%
#   group_by(FEMALE) %>%
#   summarize(preds.test = mean(preds.test))
#
# preds.test.agg.MALE = preds.test.bind %>%
#   group_by(MALE) %>%
#   summarize(preds.test = mean(preds.test))
#
# colnames(preds.test.agg.MALE) = c("FEMALE","preds.test")
# preds.test.agg = rbind(preds.test.agg.FEMALE,preds.test.agg.MALE)
#
# preds.test.agg.FEMALE = preds.test.agg %>%
#   group_by(FEMALE) %>%
#   summarize(preds.test = mean(preds.test))
#rm(preds.test.agg.FIELD);gc()
###############################
assign(paste0(name,"_XGBlinearBV_",season,"SbyFemale"), preds.test.agg)
assign(paste0(name,"_XGBlinearBV_",season,"SbyField"), data.frame(preds.test.bind$preds.test))
rm(ap.prop,datasets, id.unk,models.list2, NCAA.stacked, preds.ap,preds.test.agg,preds.test.agg.FEMALE,preds.test.agg.MALE,
trainx2, validatex2, preds,preds.t,preds.test,preds.test.bind)
rm(gender,field,id,variety)
gc()
}
sink()
dev.off()
###############################
gc()
preds.testFemale = dplyr::left_join(dplyr::left_join(dplyr::left_join(dplyr::left_join(dplyr::left_join(
dplyr::left_join(dplyr::left_join(dplyr::left_join(dplyr::left_join(
inbreds,
eval(as.name(paste0("EarHt_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("GS.Late_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("PCT.HOH_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("Plt.Height_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
#eval(as.name(paste0("RL.._XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("RL.Count_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
#eval(as.name(paste0("SL.._XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("SL.Count_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
#eval(as.name(paste0("StandCnt..Final._XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("Test.WT_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("Y.M_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE"),
eval(as.name(paste0("Yield_XGBlinearBV_",season,"SbyFemale"))), by="FEMALE")
colnames(preds.testFemale) = c("Female","EarHT_BV","GS.Late_BV","PCT.HOH_BV",
"Plt.Height_BV","RL.Count_BV","SL.Count_BV",
"Test.WT_BV","Y.M_BV","Yield_BV")
preds.testFemale = preds.testFemale[!is.na(preds.testFemale$Yield), ]
rm(list=grep(pattern = paste0("*_XGBlinearBV_",season,"SbyFemale"), x=ls(), value=TRUE))
preds.test = cbind(eval(as.name(paste0("EarHt_XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("GS.Late_XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("PCT.HOH_XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("Plt.Height_XGBlinearBV_",season,"SbyField"))),
#eval(as.name(paste0("RL.._XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("RL.Count_XGBlinearBV_",season,"SbyField"))),
#eval(as.name(paste0("SL.._XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("SL.Count_XGBlinearBV_",season,"SbyField"))),
#eval(as.name(paste0("StandCnt..Final._XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("Test.WT_XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("Y.M_XGBlinearBV_",season,"SbyField"))),
eval(as.name(paste0("Yield_XGBlinearBV_",season,"SbyField"))))
colnames(preds.test) = names
rm(list=grep(pattern = paste0("*_XGBlinearBV_",season,"SbyField"), x=ls(), value=TRUE))
gc()
testx2.2 = testx2 %>%
dplyr::left_join( Year.2[,-2],by=c("Year"="num")) %>%
dplyr::group_by(field, ID, male, female) %>%
dplyr::summarize(Year = mean(Year)) %>%
dplyr::select(-Year)
gc()
preds.test = data.table(testx2.2, preds.test)
gc()
preds.test.bind = preds.test %>%
dplyr::left_join( field.2[, c(-2)],by=c("field"="num")) %>%
dplyr::left_join( male.2[, c(-2)],by=c("male"="num")) %>%
dplyr::left_join( female.2[, c(-2)],by=c("female"="num")) %>%
dplyr::select(-c(1:4))
preds.test.bind$ID = paste0(preds.test.bind$FEMALE," + ", preds.test.bind$MALE)
rm(preds.test,testx2.2)
gc()
#preds.test.agg.FIELD = tidyr::separate(preds.test.agg.FIELD, sep= " \\+ " ,col = LINE, into=c("FEMALE","MALE"), remove=F)
preds.test.bind = preds.test.bind[,c(10:13,1:9)]
cat("Printing Colnames ", colnames(preds.test.bind), "\n")
# preds.test.agg.FIELD = preds.test.agg.FIELD %>%
#   dplyr::filter(FIELD != c("Contract - SSR-Garden City"),
#                 FIELD != c("(HOLDING)"),
#                 !grepl(FIELD, pattern = "Contract"),
#                 !grepl(FIELD, pattern = "Beck - H"))
preds.test.bind.inbredselect = preds.test.bind %>% dplyr::filter(MALE == inbred)
preds.test.bind.LINE = preds.test.bind %>%
dplyr::group_by(ID, MALE, FEMALE) %>%
dplyr::summarize(EarHt.BV  = mean(EarHt),
GS.Late.BV = mean(GS.Late),
PCT.HOH = mean(PCT.HOH),
Plt.Height.BV = mean(Plt.Height),
RL.Count.BV = mean(RL.Count),
SL.Count.BV = mean(SL.Count),
Test.WT.BV = mean(Test.WT),
Y.M.BV = mean(Y.M),
Yield.BV = mean(Yield))
gc()
#preds.test.agg.FIELD.LINE = tidyr::separate(preds.test.agg.FIELD.LINE, sep= " \\+ " ,col = LINE, into=c("FEMALE","MALE"), remove=F)
if(genotype){
openxlsx::write.xlsx(preds.test.bind.LINE, paste0(fdp,season,"_genotype","/","A.Prop",season,"_predsByLine.xlsx"),rowNames=F,overwrite=T)
rm(preds.test.bind.LINE);gc()
cat("Finished writing by LINE", "\n")
openxlsx::write.xlsx(preds.test.bind.inbredselect, paste0(fdp,season,"_genotype","/","A.Prop",season,"_predsbyLine",inbred,".xlsx"),rowNames=F,overwrite=T)
rm(preds.test.bind.inbredselect);gc()
cat("Finished writing by LINE MALE", "\n")
openxlsx::write.xlsx(preds.testFemale, paste0(fdp,season,"_genotype","/","A.Prop",season,"_predsByFemale.xlsx"),rowNames=F,overwrite=T)
rm(preds.testFemale);gc()
cat("Finished writing by FEMALE", "\n")
Field= "Field"
if(!dir.exists(paste0(fdp,season,"_genotype",Field))){
dir.create(paste0(fdp,season,"_genotype",Field))
}
field.index = preds.test.bind[!duplicated(preds.test.bind$FIELD), "FIELD"]
field.index = as.matrix(field.index)
for(i in field.index){
field.subset = subset(x=preds.test.bind, FIELD == i )
openxlsx::write.xlsx(field.subset, paste0(fdp,season,"_genotype","/",Field,"/A.Prop",season,"_predsbyLINE",i,".xlsx"),rowNames=F,overwrite=T)
}
}
else{
openxlsx::write.xlsx(preds.test.bind.LINE, paste0(fdp,season,"/","A.Prop",season,"_predsByLine.xlsx"),rowNames=F,overwrite=T)
rm(preds.test.bind.LINE);gc()
cat("Finished writing by LINE", "\n")
openxlsx::write.xlsx(preds.test.bind.inbredselect, paste0(fdp,season,"/","A.Prop",season,"_predsbyLine",inbred,".xlsx"),rowNames=F,overwrite=T)
rm(preds.test.bind.inbredselect);gc()
cat("Finished writing by LINE MALE", "\n")
openxlsx::write.xlsx(preds.testFemale, paste0(fdp,season,"/","A.Prop",season,"_predsByFemale.xlsx"),rowNames=F,overwrite=T)
rm(preds.testFemale);gc()
cat("Finished writing by FEMALE", "\n")
Field= "Field"
if(!dir.exists(paste0(fdp,season,Field))){
dir.create(paste0(fdp,season,Field))
}
field.index = preds.test.bind[!duplicated(preds.test.bind$FIELD), "FIELD"]
field.index = as.matrix(field.index)
for(i in field.index){
field.subset = subset(x=preds.test.bind, FIELD == i )
openxlsx::write.xlsx(field.subset, paste0(fdp,season,"/",Field,"/A.Prop",season,"_predsbyLINE",i,".xlsx"),rowNames=F,overwrite=T)
}
}
cat("DONE", "\n")
return(data.frame(preds.test.bind))
}
