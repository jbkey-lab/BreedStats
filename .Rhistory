paste0(BV.MC.Entry.data.AB.checkfilter.variety$Variety,".Female"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id = ifelse(BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id=="",
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Variety,".Male"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id = ifelse(is.na(BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id),
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Variety,".Female"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id = ifelse(is.na(BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id),
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Variety,".Male"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id[BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id == ".Male"]= NA
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id[BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id == ".Female"]= NA
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id = ifelse(BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id=="",
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Pedigree,".Female"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id = ifelse(BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id=="",
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Pedigree,".Male"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id = ifelse(is.na(BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id),
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Pedigree,".Female"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_female_id      )
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id = ifelse(is.na(BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id),
paste0(BV.MC.Entry.data.AB.checkfilter.variety$Pedigree,".Male"),
BV.MC.Entry.data.AB.checkfilter.variety$unique_male_id      )
# ind <- match(BV.MC.Entry.data.AB.checkfilter.variety$RecId, BV.MC.Entry.data.AB$RecId)
# BV.MC.Entry.data.AB=setDT(BV.MC.Entry.data.AB)
# BV.MC.Entry.data.AB.checkfilter.variety=setDT(BV.MC.Entry.data.AB.checkfilter.variety)
# BV.MC.Entry.data.AB =  BV.MC.Entry.data.AB %>%
#   anti_join(BV.MC.Entry.data.AB.checkfilter.variety, by = "RecId") %>%
#   bind_rows(BV.MC.Entry.data.AB.checkfilter.variety) %>%
#   arrange(RecId)
#BV.MC.Entry.data.AB[ind, 39:40] <- BV.MC.Entry.data.AB.checkfilter.variety[39:40]
BV.MC.Entry.data.AB.checkfilter.variety = BV.MC.Entry.data.AB %>% dplyr::filter(is.na(unique_male_id))
BV.MC.Entry.data.AB.checkfilter.variety.duplciate.ped=BV.MC.Entry.data.AB.checkfilter.variety[!duplicated(BV.MC.Entry.data.AB.checkfilter.variety$Pedigree),]
BV.MC.Entry.data.AB.checkfilter.variety.duplciate=BV.MC.Entry.data.AB.checkfilter.variety[!duplicated(BV.MC.Entry.data.AB.checkfilter.variety$Variety),]
pedigreeToAdd=BV.MC.Entry.data.AB.checkfilter.variety.duplciate.ped[,c("Pedigree","Entry.Book.Name","Female.Pedigree","Male.Pedigree","Hybrid.ID")]#shows variety checks that need a pedigree
varietyToAdd=BV.MC.Entry.data.AB.checkfilter.variety.duplciate[,c("Variety","Entry.Book.Name","Female.Pedigree","Male.Pedigree","Hybrid.ID")]#shows variety checks that need a pedigree
dim(pedigreeToAdd); dim(varietyToAdd)
#if(nrow(varietyToAdd)>0){
#write.csv(pedigreeToAdd,paste0(fdp,"pedigreeToAdd.csv"),row.names=F,na="")
#write.csv(varietyToAdd,paste0(fdp,"varietyToAdd.csv"),row.names=F,na="")
#}
#BV.MC.Entry.data.AB = BV.MC.Entry.data.AB[!duplicated(BV.MC.Entry.data.AB$Pedigree), ]
rm(
"BV.MC.Entry.data",
"Variety.checknames"  ,
"varietyToAdd" ,
"pedigreeToAdd",
"testanti",
"BV.MC.Entry.data.AB.save"
#"BV.MC.Entry"
)
invisible(gc(reset=T)) #cleans memory "garbage collector"
# write.table(x=BV.MC.Entry.data.AB.clean, file=paste0(wdp,"/","BV.MC.Entry.data.",
#                                                      if(A){print("A")},
#                                                      if(B){print("B")},
#                                                      if(C){print("C")},
#                                                      if(Prop){print("Prop")},
#                                                      if(Choice){print("Choice")},
#                                                      if(D){print("D")},
#                                                      if(E){print("E")},
#                                                      if(Q){print("Q")},
#                                                      if(R){print("R")},
#                                                      if(V){print("V")},
#                                                      if(X){print("X")}
#                                                      ,".txt"))
#
# cat("H")
data = BV.MC.Entry.data.AB
doReduceNonCodes = doReduceNonCodes
BV.MC.Entry.data.AB = data.frame(data)
#
# rm(BV.MC.Entry, BV.MC.Entry.data.AB.clean, BV.MC.Entry.data.AB.checkfilter, BV.MC.Entry.data.AB.checkfilter.variety.duplciate,
#    BV.MC.Entry.data.AB.checkfilter.variety.duplciate.ped, BV.MC.Entry.data.AB.checkfilter.variety)
# invisible(gc())
to_search_in.female <- data.table(BV.MC.Entry.data.AB[!duplicated(BV.MC.Entry.data.AB$unique_female_id),c(39,21)])
colnames(to_search_in.female)=c("unique","pedigree")
to_search_with.female <- tibble(BV.MC.Entry.data.AB[!duplicated(BV.MC.Entry.data.AB$unique_female_id),c(39)])
colnames(to_search_with.female) = "unique_female_id"
to_search_in.male <- data.table(BV.MC.Entry.data.AB[!duplicated(BV.MC.Entry.data.AB$unique_male_id),c(40,20)])
colnames(to_search_in.male)=c("unique","pedigree")
to_search_with.male <- tibble(BV.MC.Entry.data.AB[!duplicated(BV.MC.Entry.data.AB$unique_male_id),c(40)])
colnames(to_search_with.male) = "unique_male_id"
to_search_in.female.order = order(to_search_in.female$pedigree)
to_search_in.female = to_search_in.female[to_search_in.female.order,]
to_search_with.male.order = order(to_search_with.male$unique_male_id)
to_search_with.male = to_search_with.male[to_search_with.male.order,]
to_search_in.male.order = order(to_search_in.male$pedigree)
to_search_in.male = to_search_in.male[to_search_in.male.order,]
to_search_with.female.order = order(to_search_with.female$unique_female_id)
to_search_with.female = to_search_with.female[to_search_with.female.order,]
rm(data)
#################################################
#destfile7 = paste0(wdp,"linked.male.female.nestedpeds.xlsx")
to_search_in.male$Gender = "Male"; colnames(to_search_in.male)[1] = "uniqued_id"
to_search_in.female$Gender = "FEMALE"; colnames(to_search_in.female)[1] = "uniqued_id"
linked.peds = full_join(to_search_in.female, to_search_in.male, by=c("uniqued_id","pedigree"))
linked.peds$pedigree = as.character(linked.peds$pedigree)
linked.peds$Gender = paste0(linked.peds$Gender.x, "/", linked.peds$Gender.y)
linked.peds$Gender = gsub(pattern="\\/\\N\\A" , x = linked.peds$Gender, replacement="")
linked.peds$Gender = gsub(pattern="\\N\\A\\/" , x = linked.peds$Gender, replacement="")
linked.peds=linked.peds[,-c(3,4)]
linked.peds$pedigree = ifelse(linked.peds$pedigree=="",
as.character(linked.peds$uniqued_id),
linked.peds$pedigree)
linked.peds$pedigree = ifelse(is.na(linked.peds$pedigree),
as.character(linked.peds$uniqued_id),
linked.peds$pedigree)
linked.peds = linked.peds[!duplicated(linked.peds$uniqued_id), ]
linked.peds$match = linked.peds$pedigree
linked.peds = linked.peds[,c(1,2,4,3)]
#linked.peds=data.table(linked.peds)
#b/c (JC6794/LH185)/I10516-53 = ((JC6794/LH185)/I10516-53.2)/I10516-1
# linked.peds = data.frame(linked.peds)
# for(i in 1:nrow(linked.peds)){
#   #if(!grepl(linked.peds[i,1], pattern="\\.")){
#   linked.peds[i,3] = ifelse( nchar(linked.peds[i,1]) < nchar(linked.peds[i,3]), linked.peds[i,1], linked.peds[i,3])
# }
#linked.peds = write.xlsx(linked.peds,"C:/Users/jake.lamkey/Desktop/linked.male.female.nestedpeds.xlsx")
#linked.peds = read.xlsx("C:/Users/jake.lamkey/Desktop/linked.male.female.nestedpeds.xlsx",1)
#linked.peds$match = linked.peds$match1
#linked.peds = linked.peds[,c(1,2,20,3:19)]
#linked.peds.update=foreach(i = 1:nrow(linked.peds),
#                            .combine = cbind
#.packages=c("dplyr","tidyr","stringr"),
#.export=c("sub","grepl")
#  ) %dopar% {
linked.peds$match <- gsub("[[:space:]]", "", linked.peds$match)
linked.peds$match <- gsub("[[:space:]]", "", linked.peds$match)
linked.peds$match <- gsub("[[:space:]]", "", linked.peds$match)
linked.peds$match <- as.character(linked.peds$match)
############################################################
#Coded line import
############################################################
#linked.peds.save = linked.peds
#linked.peds = linked.peds.save
BV.MC.Inbred <- openxlsx::read.xlsx(paste0("R:/Breeding/MT_TP/Models/Data/Department Data/NEW LINE CODES.xlsx"),1)
BV.MC.Inbred$Pedigre_Backup = BV.MC.Inbred$PEDIGREE
BV.MC.Inbred = BV.MC.Inbred[,c(1:3,21,4:20)]
BV.MC.Inbred = BV.MC.Inbred[!is.na(BV.MC.Inbred$PEDIGREE),]
to_search_in <- data.table(linked.peds[!duplicated(linked.peds$match),c(3)])
colnames(to_search_in)=c("unique")
to_search_with <- tibble(BV.MC.Inbred[!duplicated(BV.MC.Inbred$PEDIGREE),c(2,3)])
colnames(to_search_with) = c("Code","unique_ped_id")
#to_search_with.male <- tibble(BV.MC.Male[!duplicated(BV.MC.Male$match1),c(2)])
#colnames(to_search_with.male) = c("unique_male_id")
dim(to_search_with);dim(to_search_in)
# rm(BV.MC.Entry.data.AB)
# invisible(gc())
#
#n = nrow(to_search_with.male)
#for(batch in 1:nrow(to_search_with)){
#to_search_with.batch = to_search_with[batch,]
invisible(gc(reset=T)) #cleans memory "garbage collector"
memory.limit(size=15071)
digitDH = "((-)?B\\.DHB[0-9]*|(-)?B\\.DH[0-9]*|(-)?\\.DH-B[0-9]*|(-)?\\.DHB[0-9]*|(-)?\\.DH[0-9]*)"
head(to_search_with)
head(to_search_in)
linked.peds.beck = to_search_with %>%
dplyr::mutate(data = list(to_search_in) ) %>%
tidyr::unnest(data) %>%
dplyr::mutate(unique_ped_id_nchar = nchar(unique_ped_id) ) %>%
dplyr::mutate(unique_nchar = nchar(unique) ) %>%
dplyr::mutate(unique_ped_id_DH = stringr::str_extract(digitDH, string = unique_ped_id) ) %>%
#dplyr::mutate(unique_ped_id_DH2 = gsub(".*?\\.(.*?)\\.*", x=unique_ped_id, value=T) ) %>%
dplyr::mutate(unique_DH = stringr::str_extract(digitDH, string=unique) ) %>%
dplyr::filter(unique_nchar <= (unique_ped_id_nchar+15)  )
linked.peds.beck2 = linked.peds.beck %>%
dplyr::mutate(unique_ped_id_DH_1 = ifelse((unique_ped_id_nchar < 10), as.matrix(grepl("\\/", x = unique )), F))
linked.peds.beck3 =  linked.peds.beck2 %>%
filter(  str_detect(unique, stringr::coll(unique_ped_id)  )  )  %>%
dplyr::filter(unique_ped_id_DH_1 != TRUE)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck4 =   linked.peds.beck3 %>%
dplyr::mutate(DH_Match = ifelse(unique_ped_id_DH == unique_DH , TRUE,FALSE) ) %>%
dplyr::mutate(DH_Match = ifelse(is.na(DH_Match), TRUE, DH_Match)) %>%
dplyr::filter(DH_Match != FALSE)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck4 = linked.peds.beck4 %>%
dplyr::select(Code,unique_ped_id,unique) %>%
dplyr::group_by(Code,unique) %>%
dplyr::summarise(strings = stringr::str_c(unique_ped_id, collapse = ", "))
rm(linked.peds.beck, linked.peds.beck2, linked.peds.beck3)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck = linked.peds.beck4 %>% tidyr::separate("strings", sep="[, ][ ]",
c("match1", "match2","match3", "match4","match5", "match6","match7", "match8","match9", "match10","match11", "match12","match13", "match14" ,"match15", "match16"),
extra="merge",
remove=F)
rm(linked.peds.beck4)
linked.peds.beck = dplyr::left_join(linked.peds.beck, BV.MC.Inbred[,c(2,3)], by=c("Code"="NEW.CODE"))
linked.peds.beck = linked.peds.beck[,c(20,1:19)]
linked.peds = dplyr::left_join(linked.peds[, c(1,2,3,4)], linked.peds.beck[, c(2,3)], by = c("match"="unique"))
head(linked.peds)
# linked.female.peds = rbindlist(bind.linked.female.peds)
linked.peds$match = ifelse(!is.na(linked.peds$Code) , as.character(linked.peds$Code), linked.peds$match)
head(linked.peds)
BV.MC.Inbred <- openxlsx::read.xlsx(paste0("R:/Breeding/MT_TP/Models/Data/Department Data/NEW LINE CODES.xlsx"),1)
BV.MC.Inbred$Pedigre_Backup = BV.MC.Inbred$PEDIGREE
BV.MC.Inbred = BV.MC.Inbred[,c(1:3,21,4:20)]
BV.MC.Inbred = BV.MC.Inbred[!is.na(BV.MC.Inbred$PEDIGREE),]
###run pedigree reduction function
#source("R:/Breeding/MT_TP/Models/R-Scripts/greplPeds.R")
newData=pedigreeReduce( data=BV.MC.Inbred, Codes=T)
BV.MC.Inbred = newData
# rm(data,newData)
#BV.MC.Inbred.slash = BV.MC.Inbred %>% dplyr::filter(grepl(, pattern="/") == TRUE)
to_search_in <- data.table(linked.peds[!duplicated(linked.peds$match),c(3)])
colnames(to_search_in)=c("unique")
to_search_with <- tibble(BV.MC.Inbred[!duplicated(BV.MC.Inbred$PEDIGREE),c(2,3)])
colnames(to_search_with) = c("Code","unique_ped_id")
#to_search_with.male <- tibble(BV.MC.Male[!duplicated(BV.MC.Male$match1),c(2)])
#colnames(to_search_with.male) = c("unique_male_id")
dim(to_search_with);dim(to_search_in)
rm(to_search_with.male, to_search_with.female, to_search_in.female, to_search_in.male, linked.peds.beck)
invisible(gc(reset=T)) #cleans memory "garbage collector"
#n = nrow(to_search_with.male)
#for(batch in 1:nrow(to_search_with)){
#to_search_with.batch = to_search_with[batch,]
linked.peds.save = linked.peds
linked.peds = linked.peds.save
head(linked.peds)
head(to_search_with)
head(to_search_in)
linked.peds.beck = to_search_with %>%
dplyr::mutate(data = list(to_search_in) ) %>%
tidyr::unnest(data) %>%
dplyr::mutate(unique_ped_id_nchar = nchar(unique_ped_id) ) %>%
dplyr::mutate(unique_nchar = nchar(unique) ) %>%
dplyr::mutate(unique_ped_id_DH = stringr::str_extract(digitDH, string = unique_ped_id) ) %>%
#dplyr::mutate(unique_ped_id_DH2 = gsub(".*?\\.(.*?)\\.*", x=unique_ped_id, value=T) ) %>%
dplyr::mutate(unique_DH = stringr::str_extract(digitDH, string=unique) ) %>%
dplyr::filter(unique_nchar <= (unique_ped_id_nchar+15)  )
linked.peds.beck2 = linked.peds.beck %>%
dplyr::mutate(unique_ped_id_DH_1 = ifelse((unique_ped_id_nchar < 10), as.matrix(grepl("\\/", x = unique )), F))
rm(linked.peds.beck); invisible(gc(reset=T))
linked.peds.beck3 =  linked.peds.beck2 %>%
filter(  str_detect(unique, stringr::coll(unique_ped_id)  )  )  %>%
dplyr::filter(unique_ped_id_DH_1 != TRUE)
rm(linked.peds.beck2)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck4 =   linked.peds.beck3 %>%
dplyr::mutate(DH_Match = ifelse(unique_ped_id_DH == unique_DH , TRUE, FALSE) ) %>%
dplyr::mutate(DH_Match = ifelse(is.na(DH_Match), TRUE, DH_Match)) %>%
dplyr::filter(DH_Match != FALSE)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck4 = linked.peds.beck4 %>%
dplyr::select(Code,unique_ped_id,unique) %>%
dplyr::group_by(Code,unique) %>%
dplyr::summarise(strings = stringr::str_c(unique_ped_id, collapse = ", "))
rm(linked.peds.beck, linked.peds.beck2, linked.peds.beck3)
invisible(gc(reset=T)) #cleans memory "garbage collector"
linked.peds.beck = linked.peds.beck4 %>% tidyr::separate("strings", sep="[, ][ ]",
c("match1", "match2","match3", "match4","match5", "match6","match7", "match8","match9", "match10","match11", "match12","match13", "match14" ,"match15", "match16"),
extra="merge",
remove=F)
rm(linked.peds.beck4)
linked.peds.beck = dplyr::left_join(linked.peds.beck, BV.MC.Inbred[,c(2,3)], by=c("Code"="NEW.CODE"))
linked.peds.beck = linked.peds.beck[,c(20,1:19)]
colnames(linked.peds.beck)[2] = "CodeV2"
linked.peds = dplyr::left_join(linked.peds[, c(1,2,3,4,5)], linked.peds.beck[, c(2,3)], by = c("match"="unique"))
# linked.female.peds = rbindlist(bind.linked.female.peds)
linked.peds$match = ifelse(!is.na(linked.peds$CodeV2) , as.character(linked.peds$CodeV2), linked.peds$match)
linked.peds$match = ifelse(!is.na(linked.peds$Code) , as.character(linked.peds$Code), linked.peds$match)
linked.peds$Code = ifelse(is.na(linked.peds$Code ), as.character(linked.peds$CodeV2), linked.peds$Code)
linked.peds = linked.peds[!duplicated(linked.peds$uniqued_id), ]
head(linked.peds)
linked.peds.save = linked.peds
linked.peds = linked.peds.save
linked.peds$match = as.character(linked.peds$match)
linked.peds$match <- gsub("[[:space:]]", "", linked.peds$match)
linked.peds$match1 = linked.peds$match
linked.peds$match2 = linked.peds$match
linked.peds$match3 = linked.peds$match
linked.peds$match4 = linked.peds$match
linked.peds$match5 = linked.peds$match
linked.peds$match6 = linked.peds$match
linked.peds$match7 = linked.peds$match
linked.peds$match8 = linked.peds$match
linked.peds$match9 = linked.peds$match
linked.peds$match10 = linked.peds$match
linked.peds$match11 = linked.peds$match
linked.peds$match12 = linked.peds$match
linked.peds$match13 = linked.peds$match
linked.peds$match14 = linked.peds$match
linked.peds$match15 = linked.peds$match
linked.peds$match16 = linked.peds$match
linked.peds$proccessed = ""
patterns = InbredNameLibrary()
patterns = patterns[[1]]
#inbreds##################################################################3
match=stringr::str_detect(string = linked.peds$match, pattern = paste(patterns, collapse = "|"), negate=T)
match=data.frame(match)
for(i in 1:nrow(linked.peds)) {
if(match[i,1]==TRUE){
#print("yes")
linked.peds[i,3] = gsub(x=linked.peds[i,3], pattern=fixed("-.*"), replacement="") # add a period for using wildcards
linked.peds[i,3] = gsub(x=linked.peds[i,3], pattern=fixed("\\)"), replacement="") #escape parathesis with \\
linked.peds[i,23] = "Proccessed" # add a period for using wildcards
}
}
if(doReduceNonCodes){
newData=pedigreeReduce(data=linked.peds, Codes=F)
nrow(newData)
newDataRmDups = newData[!duplicated(newData$match),]
nrow(newDataRmDups)
newData$changed = ifelse(newData$pedigree != newData$match, T, F)
newData.changed = newData %>% dplyr::filter(changed==T)
nrow(newData.changed)
linked.peds = newData
#rm(data,newData)
}
cat("Done with adjusting Pedigrees")
#linked.peds = newData
write.xlsx(linked.peds, paste0(wdp,"/","linked.peds.xlsx"), overwrite=T)
#linked.peds = newData
openxlsx::write.xlsx(linked.peds, paste0(wdp,"/","linked.peds.xlsx"), overwrite=T)
library(BreedStats)
library(tidyverse)
library(data.table)
#########################################################
fdp = paste0("C:/Users/jake.lamkey/Documents") #FINAL DATA PATH TO WRITE PEDIGREES
wdp = paste0("C:/Users/jake.lamkey/Documents") #WORKING DATA PATH TO CHANGE PEDIGREES
#x="11_8_2021"
#ws = paste0('R:/Breeding/MT_TP/Models/Data/Department Data/YT_BV Yield Trial Master Catalog ',x, ".csv")
date="1_19_2022"
ws = paste0("P:/Temp/PedAdjust ",date,".csv")
#YEARS IN INVENTORY CATALOG
seas0 = "21"
seas1 = ""
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
#########################################################
suppressWarnings(suppressMessages(BV(fdp = fdp, #paste0("R:/Breeding/MT_TP/Models/Breeding Values/",folder),
wdp = wdp,#paste0("R:/Breeding/MT_TP/Models/Data/Department Data/",folder,"/"),
ws = ws, date=date,  #LOAD DATA
doPedigreeChange =T, doReduceNonCodes=T, #PEDIGREE SETTINGS
InventoryPedigree = T, ytData=F, simulate=F, #TYPE OF DATA LOADING
doHybridID=F, doGCABV = F,doYear=T, #TYPE OF ANALYSIS
doPedigreeToBecksChange=F,doWriteFinalPedigrees =F,
year= "21S", folder="21S",
A = T,B = F,C = F,Prop = F,Choice = F,D=F,R=F,X=F,E=F,Q=F,V=F,GEM=F, #TESTING LEVEL
doDNN = F,
s0=if(seas0 == ""){s0=F}else(s0=T),
s1=if(seas1 == ""){s1=F}else(s1=T),
s2=if(seas2 == ""){s2=F}else(s2=T),
s3=if(seas3 == ""){s3=F}else(s3=T),
s4=if(seas4 == ""){s4=F}else(s4=T),
s5=if(seas5 == ""){s5=F}else(s5=T),
seas0=seas0,seas1=seas1, seas2=seas2, seas3=seas3,  seas4=seas4, seas5=seas5
#if(doYear == "True"){doYear=T}else(doYear=F) #doYear,
)))
#sink()
?nchar
?unnest
?mutate
library(BreedStats)
library(tidyverse)
library(data.table)
#########################################################
fdp = paste0("C:/Users/jake.lamkey/Documents") #FINAL DATA PATH TO WRITE PEDIGREES
wdp = paste0("C:/Users/jake.lamkey/Documents") #WORKING DATA PATH TO CHANGE PEDIGREES
#x="11_8_2021"
#ws = paste0('R:/Breeding/MT_TP/Models/Data/Department Data/YT_BV Yield Trial Master Catalog ',x, ".csv")
date="1_19_2022"
ws = paste0("P:/Temp/PedAdjust ",date,".csv")
#YEARS IN INVENTORY CATALOG
seas0 = "21"
seas1 = ""
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
#########################################################
suppressWarnings(suppressMessages(BV(fdp = fdp, #paste0("R:/Breeding/MT_TP/Models/Breeding Values/",folder),
wdp = wdp,#paste0("R:/Breeding/MT_TP/Models/Data/Department Data/",folder,"/"),
ws = ws, date=date,  #LOAD DATA
doPedigreeChange =T, doReduceNonCodes=T, #PEDIGREE SETTINGS
InventoryPedigree = T, ytData=F, simulate=F, #TYPE OF DATA LOADING
doHybridID=F, doGCABV = F,doYear=T, #TYPE OF ANALYSIS
doPedigreeToBecksChange=F,doWriteFinalPedigrees =F,
year= "21S", folder="21S",
A = T,B = F,C = F,Prop = F,Choice = F,D=F,R=F,X=F,E=F,Q=F,V=F,GEM=F, #TESTING LEVEL
doDNN = F,
s0=if(seas0 == ""){s0=F}else(s0=T),
s1=if(seas1 == ""){s1=F}else(s1=T),
s2=if(seas2 == ""){s2=F}else(s2=T),
s3=if(seas3 == ""){s3=F}else(s3=T),
s4=if(seas4 == ""){s4=F}else(s4=T),
s5=if(seas5 == ""){s5=F}else(s5=T),
seas0=seas0,seas1=seas1, seas2=seas2, seas3=seas3,  seas4=seas4, seas5=seas5
#if(doYear == "True"){doYear=T}else(doYear=F) #doYear,
)))
#sink()
library(BreedStats)
library(tidyverse)
library(data.table)
#########################################################
fdp = paste0("C:/Users/jake.lamkey/Documents") #FINAL DATA PATH TO WRITE PEDIGREES
wdp = paste0("C:/Users/jake.lamkey/Documents") #WORKING DATA PATH TO CHANGE PEDIGREES
#x="11_8_2021"
#ws = paste0('R:/Breeding/MT_TP/Models/Data/Department Data/YT_BV Yield Trial Master Catalog ',x, ".csv")
date="1_19_2022"
ws = paste0("P:/Temp/PedAdjust ",date,".csv")
#YEARS IN INVENTORY CATALOG
seas0 = "21"
seas1 = ""
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
#########################################################
suppressWarnings(suppressMessages(BV(fdp = fdp, #paste0("R:/Breeding/MT_TP/Models/Breeding Values/",folder),
wdp = wdp,#paste0("R:/Breeding/MT_TP/Models/Data/Department Data/",folder,"/"),
ws = ws, date=date,  #LOAD DATA
doPedigreeChange =T, doReduceNonCodes=T, #PEDIGREE SETTINGS
InventoryPedigree = T, ytData=F, simulate=F, #TYPE OF DATA LOADING
doHybridID=F, doGCABV = F,doYear=T, #TYPE OF ANALYSIS
doPedigreeToBecksChange=F,doWriteFinalPedigrees =F,
year= "21S", folder="21S",
A = T,B = F,C = F,Prop = F,Choice = F,D=F,R=F,X=F,E=F,Q=F,V=F,GEM=F, #TESTING LEVEL
doDNN = F,
s0=if(seas0 == ""){s0=F}else(s0=T),
s1=if(seas1 == ""){s1=F}else(s1=T),
s2=if(seas2 == ""){s2=F}else(s2=T),
s3=if(seas3 == ""){s3=F}else(s3=T),
s4=if(seas4 == ""){s4=F}else(s4=T),
s5=if(seas5 == ""){s5=F}else(s5=T),
seas0=seas0,seas1=seas1, seas2=seas2, seas3=seas3,  seas4=seas4, seas5=seas5
#if(doYear == "True"){doYear=T}else(doYear=F) #doYear,
)))
#sink()
?stopCluter
?stopCluster
library(BreedStats)
library(tidyverse)
library(data.table)
#########################################################
fdp = paste0("C:/Users/jake.lamkey/Documents") #FINAL DATA PATH TO WRITE PEDIGREES
wdp = paste0("C:/Users/jake.lamkey/Documents") #WORKING DATA PATH TO CHANGE PEDIGREES
#x="11_8_2021"
#ws = paste0('R:/Breeding/MT_TP/Models/Data/Department Data/YT_BV Yield Trial Master Catalog ',x, ".csv")
date="1_19_2022"
ws = paste0("P:/Temp/PedAdjust ",date,".csv")
#YEARS IN INVENTORY CATALOG
seas0 = "21"
seas1 = ""
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
#########################################################
suppressWarnings(suppressMessages(BV(fdp = fdp, #paste0("R:/Breeding/MT_TP/Models/Breeding Values/",folder),
wdp = wdp,#paste0("R:/Breeding/MT_TP/Models/Data/Department Data/",folder,"/"),
ws = ws, date=date,  #LOAD DATA
doPedigreeChange =T, doReduceNonCodes=T, #PEDIGREE SETTINGS
InventoryPedigree = T, ytData=F, simulate=F, #TYPE OF DATA LOADING
doHybridID=F, doGCABV = F,doYear=T, #TYPE OF ANALYSIS
doPedigreeToBecksChange=F,doWriteFinalPedigrees =F,
year= "21S", folder="21S",
A = T,B = F,C = F,Prop = F,Choice = F,D=F,R=F,X=F,E=F,Q=F,V=F,GEM=F, #TESTING LEVEL
doDNN = F,
s0=if(seas0 == ""){s0=F}else(s0=T),
s1=if(seas1 == ""){s1=F}else(s1=T),
s2=if(seas2 == ""){s2=F}else(s2=T),
s3=if(seas3 == ""){s3=F}else(s3=T),
s4=if(seas4 == ""){s4=F}else(s4=T),
s5=if(seas5 == ""){s5=F}else(s5=T),
seas0=seas0,seas1=seas1, seas2=seas2, seas3=seas3,  seas4=seas4, seas5=seas5
#if(doYear == "True"){doYear=T}else(doYear=F) #doYear,
)))
#sink()
library(BreedStats)
library(tidyverse)
library(data.table)
#########################################################
fdp = paste0("C:/Users/jake.lamkey/Documents") #FINAL DATA PATH TO WRITE PEDIGREES
wdp = paste0("C:/Users/jake.lamkey/Documents") #WORKING DATA PATH TO CHANGE PEDIGREES
#x="11_8_2021"
#ws = paste0('R:/Breeding/MT_TP/Models/Data/Department Data/YT_BV Yield Trial Master Catalog ',x, ".csv")
date="1_19_2022"
ws = paste0("P:/Temp/PedAdjust ",date,".csv")
#YEARS IN INVENTORY CATALOG
seas0 = "21"
seas1 = ""
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
#########################################################
suppressWarnings(suppressMessages(BV(fdp = fdp, #paste0("R:/Breeding/MT_TP/Models/Breeding Values/",folder),
wdp = wdp,#paste0("R:/Breeding/MT_TP/Models/Data/Department Data/",folder,"/"),
ws = ws, date=date,  #LOAD DATA
doPedigreeChange =T, doReduceNonCodes=T, #PEDIGREE SETTINGS
InventoryPedigree = T, ytData=F, simulate=F, #TYPE OF DATA LOADING
doHybridID=F, doGCABV = F,doYear=T, #TYPE OF ANALYSIS
doPedigreeToBecksChange=F,doWriteFinalPedigrees =F,
year= "21S", folder="21S",
A = T,B = F,C = F,Prop = F,Choice = F,D=F,R=F,X=F,E=F,Q=F,V=F,GEM=F, #TESTING LEVEL
doDNN = F,
s0=if(seas0 == ""){s0=F}else(s0=T),
s1=if(seas1 == ""){s1=F}else(s1=T),
s2=if(seas2 == ""){s2=F}else(s2=T),
s3=if(seas3 == ""){s3=F}else(s3=T),
s4=if(seas4 == ""){s4=F}else(s4=T),
s5=if(seas5 == ""){s5=F}else(s5=T),
seas0=seas0,seas1=seas1, seas2=seas2, seas3=seas3,  seas4=seas4, seas5=seas5
#if(doYear == "True"){doYear=T}else(doYear=F) #doYear,
)))
#sink()
