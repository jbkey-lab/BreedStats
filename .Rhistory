savePredictions = TRUE,
#classProbs=T,
allowParallel = TRUE,
verboseIter = TRUE
# preProcOptions =list(
#  # method = c("knnImpute"),
#   k = 7,
#   knnSummary = mean)
#na.remove = TRUE #method = c("center", "scale"))
# outcome = NULL,
# fudge = 0.2,
# numUnique = 3,
# verbose = FALSE,
# freqCut = 95/5,
# uniqueCut = 10,
#cutoff = 0.9)
# rangeBounds = c(0, 1))
#p=.75
# seeds=c(1,2,3,4,5,6,7,8,9),
# indexFinal = length(sample(nrow(trainx2), (nrow(trainx2))*.3))
),
tuneList=list(
#  qrf1=caretModelSpec(method="qrf", ntree=500, tuneLength = 1), #11
#  qrf2=caretModelSpec(method="qrf", ntree=7, tuneLength = 1), #11
#  qrf3=caretModelSpec(method="qrf", ntree=10, tuneLength = 1), #9
# # #qrf4=caretModelSpec(method="qrf", ntree = 150, tuneLength = 1), #7
#qrf5=caretModelSpec(method="qrf", ntree=10, tuneLength = 1), #5
#qrf6=caretModelSpec(method="xgbLinear", tuneGrid = final_grid2), #5
#qrf5=caretModelSpec(method="qrf",ntree=10, tuneLength = 1), #5
#qrf6=caretModelSpec(method="xgbLinear", tuneGrid = final_grid2), #5
qrf7=caretEnsemble::caretModelSpec(method="xgbLinear", tuneGrid = final_grid3) #5
#qrf8=caretEnsemble::caretModelSpec(method="xgbLinear", tuneGrid = final_grid4) #5
#qrf9=caretModelSpec(method="BstLm") #5
#qrf8=caretModelSpec(method="cubist") #5
# qrf6=caretModelSpec(method="qrf", ntree=2, tuneLength = 1) #5
)
# ),
# methodList = c(
#   "cubist",
#   "xgbLinear"
#
# )
)
invisible(gc())
models.list2
NCAA.stacked<-caretEnsemble::caretEnsemble(models.list2, # + 95
trControl = caret::trainControl(
number=2,
method="boot",
verboseIter =TRUE,
allowParallel = T
)
);NCAA.stacked # + 95
s0=T
s1 =T
s2 =F
s3 =F
s4 =F
s5 =F
seas0 = 21
seas1 = 20
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
sdp = "C:/Users/jake.lamkey/Documents/"
fdp= "C:/Users/jake.lamkey/Documents/"
library(BreedStats)
library(tidyverse)
library(doParallel)
library(caretEnsemble)
library(caret)
library(data.table)
season="21S"
rounds = 30
eta=1
alpha = .0003
lambda=.0003
male =   data.frame(male=c('BSQ033',	'GP734GTCBLL',	'BEX905',	'R08072HT',
'BRQ529',	'8D2',	'SGI193',	'8SY',
'GP718',	'FC2',	'BSR095',	'BRU059',
'BRQ291',	'BRP251',	'TR6254RR2',	'BSQ033-PWRA',
'BUR070',	'BRS312',	'8SY-AM',	'GP717Hx1',
'BAC020',	'TPCJ6605',	'BSU151',	'SGI193-V2P',
'BRQ064',	'GP6823Hx1',	'I10516',	'W8039RPGJZ',
'FB6455',	'BSU311',	'GP717',	'BSQ002',
'BAA441',	'GP738Hx1',	'BHH069',
'84Z',	'TR4949',	'GP695Hx1',	'BSU313',
'BHA493',	'R2846-NS6408DGV2P',	'I12003',	'R2846',
'BSR273',	'BSQ941',	'BUR032',	'PRW-AM',
'GP718Hx1',	'24AED-D02',"BAA419","BAA411","BHB075","BHJ471","GP702",
"40QHQ-E07", "BQS941","BRS313","BSS009","GP738","BRR553",
"BCA509","F8994","T1874","BUR011", "BQR334",
"R6076","BRQ041","BBH030","F9898","85E","LFX7508","FC2YHR"
))
genotype=T
s0=T
s1 =T
s2 =F
s3 =F
s4 =F
s5 =F
seas0 = 21
seas1 = 20
seas2 = ""
seas3 = ""
seas4 = ""
seas5 = ""
sdp = "C:/Users/jake.lamkey/Documents/"
fdp= "C:/Users/jake.lamkey/Documents/"
library(BreedStats)
library(tidyverse)
library(doParallel)
library(caretEnsemble)
library(caret)
library(data.table)
season="21S"
rounds = 30
eta=1
alpha = .0003
lambda=.0003
male =   data.frame(male=c('BSQ033',	'GP734GTCBLL',	'BEX905',	'R08072HT',
'BRQ529',	'8D2',	'SGI193',	'8SY',
'GP718',	'FC2',	'BSR095',	'BRU059',
'BRQ291',	'BRP251',	'TR6254RR2',	'BSQ033-PWRA',
'BUR070',	'BRS312',	'8SY-AM',	'GP717Hx1',
'BAC020',	'TPCJ6605',	'BSU151',	'SGI193-V2P',
'BRQ064',	'GP6823Hx1',	'I10516',	'W8039RPGJZ',
'FB6455',	'BSU311',	'GP717',	'BSQ002',
'BAA441',	'GP738Hx1',	'BHH069',
'84Z',	'TR4949',	'GP695Hx1',	'BSU313',
'BHA493',	'R2846-NS6408DGV2P',	'I12003',	'R2846',
'BSR273',	'BSQ941',	'BUR032',	'PRW-AM',
'GP718Hx1',	'24AED-D02',"BAA419","BAA411","BHB075","BHJ471","GP702",
"40QHQ-E07", "BQS941","BRS313","BSS009","GP738","BRR553",
"BCA509","F8994","T1874","BUR011", "BQR334",
"R6076","BRQ041","BBH030","F9898","85E","LFX7508","FC2YHR"
))
genotype=T
season0=as.numeric(seas0)
season1=as.numeric(seas1)
season2=as.numeric(seas2)
season3=as.numeric(seas3)
season4=as.numeric(seas4)
season5=as.numeric(seas5)
male.3=male
cores=parallel::detectCores()
cl <- parallel::makeCluster(cores[1]-1, outfile="")
doParallel::registerDoParallel(cl)
######################################################
trainingx2 = data.table::fread(paste0(sdp,"BV.HSIdentical.df.csv"))
#linked.peds = openxlsx::read.xlsx(paste0("R:/Breeding/MT_TP/Models/Data/Department Data/linked.peds.updated_21S_all.xlsx"),1)
linked.peds = openxlsx::read.xlsx(paste0(sdp, "linked.peds.xlsx"),1)
industryNames = InbredNameLibrary()
industryNames = industryNames[[2]]
linked.peds[,"match"] <- suppressWarnings(suppressMessages(plyr::revalue(as.character(linked.peds[,"match"]), industryNames)))  #industry name to inbred name conversion
group_and_concat <- linked.peds %>%
dplyr::select(uniqued_id, match, Gender) %>%
dplyr::group_by(match) %>%
dplyr::mutate(Prism_Mped_Fped_HId_Ped_IName_Var = paste(uniqued_id, collapse = " , "),
HG = paste(Gender, collapse = " , "))
group_and_concat$HG = gsub(group_and_concat$HG, pattern="/", replacement = " , ")
group_and_concat$HetGrp <- sapply(group_and_concat$HG, function(x) paste(unique(unlist(stringr::str_split(x," , "))),
collapse = " , "))
group_and_concat$HetGrp = gsub(group_and_concat$HetGrp, pattern="FEMALE , Male", replacement = "Female/Male")
group_and_concat$HetGrp = gsub(group_and_concat$HetGrp, pattern="Male , FEMALE", replacement = "Female/Male")
group_and_concat = group_and_concat[!duplicated(group_and_concat$match),]
trainingx2 = dplyr::left_join(trainingx2, group_and_concat[,c(2,4,6)], by=c("MALE"="match"))
#BV.MC.Entry.data.test = fread(paste0(hdp,"BV.HSIdentical.df.csv"))
trainingx2 = trainingx2 %>% dplyr::filter(Plot.Discarded != "Yes",
Plot.Status != "3 - Bad",
Yield < 600,
PCT.HOH < 50 ) %>%
data.frame()
RE = randomEffect(CNN= "field", CN=c("FIELD","LINE"), trainingx2)
field.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "male", CN=c("MALE","LINE"), trainingx2)
male.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "female", CN=c("FEMALE","LINE"), trainingx2)
female.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "ID", CN=c("LINE","MALE","FEMALE"), trainingx2)
ID.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "Year", CN=c("YEAR","LINE"), trainingx2)
Year.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "variety", CN=c("Variety","LINE"), trainingx2)
variety.2 = RE[[1]]
trainingx2 = RE[[2]]
RE = randomEffect(CNN= "hetgrp", CN=c("HetGrp","LINE"), trainingx2)
gender.2 = RE[[1]]
trainingx2 = RE[[2]]
linked.peds.rmdups = linked.peds[!duplicated(linked.peds$match),]
trainingx2 = left_join(trainingx2, linked.peds.rmdups[,2:3], by=c("FEMALE"="match"))
nullvarnum = variety.2 %>% dplyr::filter((Variety)=="") %>% dplyr::select(num) %>% as.integer()
BV.HSIdentical.df.A = levelSelector(level="A",BV.MC.Entry.data=trainingx2,s0=s0,s1=s1,s2=s2,s3=s3,s4=s4,s5=s5,
season0=season0,season1=season1,season2=season2,
season3=season3,season4=season4,season5=season5)
BV.HSIdentical.df.Prop = pcSelector(commericalType = "Prop", altCommericalType = "PET",
BV.MC.Entry.data=trainingx2,s0=s0,s1=s1,s2=s2,s3=s3,s4=s4,s5=s5,
season0=season0,season1=season1,season2=season2,
season3=season3,season4=season4,season5=season5)
BV.HSIdentical.df = rbind(BV.HSIdentical.df.A,
BV.HSIdentical.df.Prop)
if(genotype){
#Genos = openxlsx::read.xlsx(paste0(sdp,"exportmarkers.xlsx"), 1 )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#trimpeds = read.csv(paste0(sdp,"BV.HSIdentical.df.trimpeds.csv") )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#need two files for this function preprosseed separatly
BV.HSIdentical.df=genoReady(sdp=sdp, inbreds=inbreds, linked.peds=linked.peds,
trainingx2=BV.HSIdentical.df)
}
#male = BV.HSIdentical.df[!duplicated(BV.HSIdentical.df$male),"male"]
female = BV.HSIdentical.df[!duplicated(BV.HSIdentical.df$FEMALE),c("FEMALE","female")]
female = BV.HSIdentical.df[!duplicated(BV.HSIdentical.df$FEMALE),c("FEMALE","female")]
female.index = grepl(female$FEMALE, pattern="^B|^G|^T|^S|^R")
female.grid = female[female.index==T,]
field = BV.HSIdentical.df[!duplicated(BV.HSIdentical.df$field),c("field","FIELD","YEAR")]
field = field %>%  dplyr::filter(YEAR == 2021) %>%  dplyr::select(field,FIELD)
variety = trainingx2[!duplicated(trainingx2$ID), c("variety","ID")]
id = trainingx2[!duplicated(trainingx2$ID), c("male","female","ID")]
gender = trainingx2[!duplicated(trainingx2$ID), c("hetgrp","ID")]
rm(BV.HSIdentical.df.A, BV.HSIdentical.df.Prop, BV.MC.Entry.data.test, BV.MC.Entry.data,RE,group_and_concat)
gc()
#male.3 =male.3
male.3 = data.frame(male= male.3[!duplicated(male.3),])
male.3 = dplyr::left_join(male.3,male.2[,-2],by=c("male"="MALE") )
male.3 = na.omit(male.3)
male = data.frame(male.2[,1]); female = data.frame(female.2[,1])
colnames(male)="FEMALE"
colnames(female)="FEMALE"
inbreds = rbind(male,female)
inbreds = inbreds[!duplicated(inbreds$FEMALE), ]
inbreds = data.frame(inbreds)
rm(linked.peds.rmdups)
gc()
##############################################
#process genotypes
#############################################
if(genotype){
#Genos = openxlsx::read.xlsx(paste0(sdp,"exportmarkers.xlsx"), 1 )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#trimpeds = read.csv(paste0(sdp,"BV.HSIdentical.df.trimpeds.csv") )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#need two files for this function preprosseed separatly
trainingx2=genoReady(sdp=sdp, inbreds=inbreds, linked.peds=linked.peds,
trainingx2=trainingx2)
}
#########################
field = field %>% data.frame() %>%
dplyr::filter(FIELD != c("Contract - SSR-Garden City"),
FIELD != c("(HOLDING)"),
!grepl(FIELD, pattern = "Contract"),
!grepl(FIELD, pattern = "Beck - H")) %>%
dplyr::select(field)
gc()
#field =data.frame(field=c(1,2))
testx2 = expand.grid(male.3$num, female.grid$female, Year.2$num, field$field )
# testx2$ID.cat = paste0(testx2$female, " + ", testx2$male)
testx2 = dplyr::left_join(testx2, id, by=c("Var1"="male","Var2"="female"))
testx2= dplyr::left_join(testx2, variety, by=c("ID"="ID"))
testx2= dplyr::left_join(testx2, gender, by=c("ID"="ID"))
colnames(testx2)=c("male","female","Year","field","ID","variety","hetgrp")
testx2$ID.cat = paste0(testx2$female, " + ", testx2$male)
id.unk = testx2 %>% dplyr::filter(is.na(ID)) %>%
dplyr::mutate(ID.concat = paste0(female, " + ", male)) %>%
dplyr::distinct(ID.concat) %>%
dplyr::mutate(num = ((max(trainingx2$ID)+1):(length(ID.concat)+(max(trainingx2$ID))) ) )
testx2 = dplyr::left_join(testx2, id.unk, by=c("ID.cat"="ID.concat"))
testx2$ID = ifelse(is.na(testx2$ID), testx2$num,testx2$ID)
testx2$variety = ifelse(is.na(testx2$variety), nullvarnum, testx2$variety)
#testx2$field = 9
testx2 = testx2[ ,c(6,5,1,2,3,4,7)]
BV.HSIdentical.df = BV.HSIdentical.df[,-c(43,44)]
trainingx2 = trainingx2[,-c(43,44)]
if(genotype){
BV.HSIdentical.df.join=BV.HSIdentical.df[!duplicated(BV.HSIdentical.df$female),c(38,43,44,45)]
#Genos = openxlsx::read.xlsx(paste0(sdp,"exportmarkers.xlsx"), 1 )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#trimpeds = read.csv(paste0(sdp,"BV.HSIdentical.df.trimpeds.csv") )#; colnames(earht.prism.norm)[1] = "Female Pedigree"
#need two files for this function preprosseed separatly
testx2 = testx2 %>%
left_join(BV.HSIdentical.df.join)
rm(BV.HSIdentical.df.join)
gc()
}
l<-length(trainingx2)#; l
names<-names(trainingx2[,c(10:13,15,17,20:22)]); names
classes<-sapply(trainingx2[c(10:22)], class); classes
#cat(paste0(fdp),"\n")
#cat("F", "\n")
if(genotype){
if(!dir.exists(paste0(fdp,season,"_genotype"))){
dir.create(paste0(fdp,season,"_genotype"))
}
sink(file=paste0(fdp,season,"_genotype","/XGBlinearBV_genotype",season,".txt"),split=TRUE)
pdf(file = paste0(fdp,season,"_genotype","/XGBlinearBV_genotype",season,".pdf"), paper="special",width = 11,
height = 8.5,family="Times", pointsize=11,bg="white",fg="black")
#name='yield'
}else{
if(!dir.exists(paste0(fdp,season))){
dir.create(paste0(fdp,season))
}
sink(file=paste0(fdp,season,"/XGBlinearBV",season,".txt"),split=TRUE)
pdf(file = paste0(fdp,season,"/XGBlinearBV",season,".pdf"), paper="special",width = 11,
height = 8.5,family="Times", pointsize=11,bg="white",fg="black")
}
for(name in names){
print(name)
}
#
# cat("G", "\n")
# cl=parallel::detectCores()
# cl <- makePSOCKcluster(cl-1)
# registerDoParallel(cl)
#
# bind.linked.male.peds=foreach(name=names,
#                               .packages=c("dplyr","asreml","stats","data.table"),
#                               .export=c("mutate","filter","setNames","group_by","summarise",
#                                         "asreml","setDT","left_join","fitted","data.table","transform","data.table")
#  ) %dopar% {
#library(asreml)
rm(linked.peds, id.unk, gender,female,variety, male,male.3, id, field, female.grid)
gc()
name="Yield"
cat("G", "\n")
cat(paste0("--------------------------------------",name,"--------------------------------------"), "\n")
if( "feature" %in% colnames(trainingx2)){
trainingx2 = trainingx2 %>% dplyr::select(-feature)
}
nameCol = paste0(name)
trainingx2 = data.frame(trainingx2)
trainingx2$feature = trainingx2[,name]
#aprop= na.omit(BV.HSIdentical.df[,c(name,41,39,37,38,40,36,42)])
if( "feature" %in% colnames(BV.HSIdentical.df)){
BV.HSIdentical.df = BV.HSIdentical.df %>% dplyr::select(-feature)
}
nameCol = paste0(name)
BV.HSIdentical.df = data.frame(BV.HSIdentical.df)
BV.HSIdentical.df$feature = BV.HSIdentical.df[,name]
#trainingx2 = na.omit(trainingx2[,c(name,41,39,37,38,40,36,42)]) #yield = 22, plt.height=13, ear=10
colnames(trainingx2)[11:ncol(trainingx2)]
colnames(trainingx2)[1:15]
colnames(trainingx2)[1:50]
i="abph1.15"
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, i], data = trainingx2)
markerLm
sumMarkerLm = summary(sumMarkerLm)
sumMarkerLm = summary(markerLm)
sumMarkerLm
sumMarkerLm[["Coefficients"]]["Pr(>|t|)"]
sumMarkerLm[["Coefficients"]][,"Pr(>|t|)"]
sumMarkerLm$coefficients[["Coefficients"]][,"Pr(>|t|)"]
sumMarkerLm$coefficients[,"Pr(>|t|)"]
sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"]
sumMarkerLm$coefficients
sumMarkerLm$coefficients[ "Pr(>|t|)"]
sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"]
sumMarkerLm
as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
cat(i, ": P-value is ",sumMarkerLmPvalue,"\n" )
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
cat(i, ": P-value is ",sumMarkerLmPvalue,"\n" )
cat(i,": P-value is ",sumMarkerLmPvalue,"\n" )
colnames(trainingx2)[1:50]
markerList = list()
for(name in names){
cat(paste0("--------------------------------------",name,"--------------------------------------"), "\n")
if( "feature" %in% colnames(trainingx2)){
trainingx2 = trainingx2 %>% dplyr::select(-feature)
}
nameCol = paste0(name)
trainingx2 = data.frame(trainingx2)
trainingx2$feature = trainingx2[,name]
#aprop= na.omit(BV.HSIdentical.df[,c(name,41,39,37,38,40,36,42)])
if( "feature" %in% colnames(BV.HSIdentical.df)){
BV.HSIdentical.df = BV.HSIdentical.df %>% dplyr::select(-feature)
}
nameCol = paste0(name)
BV.HSIdentical.df = data.frame(BV.HSIdentical.df)
BV.HSIdentical.df$feature = BV.HSIdentical.df[,name]
#trainingx2 = na.omit(trainingx2[,c(name,41,39,37,38,40,36,42)]) #yield = 22, plt.height=13, ear=10
# data=foreach(i=(1:nrow(data)),.packages=c("tidyverse"),.export=c("str_detect"),.combine=rbind,.inorder=F) %dopar% {
#   a=cov1(data=data[i,])
#   a
# }
markerList = list()
markerSelect = function(trainingx2 ,markerList )
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, i], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
if(sumMarkerLmPvalue <= .05){
cat(i,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
}
return(i)
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
data=foreach(i=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
a = markerSelect(trainingx2 = trainingx2,markerList=markerList )
a
}
gc()
for(name in names){
cat(paste0("--------------------------------------",name,"--------------------------------------"), "\n")
if( "feature" %in% colnames(trainingx2)){
trainingx2 = trainingx2 %>% dplyr::select(-feature)
}
nameCol = paste0(name)
trainingx2 = data.frame(trainingx2)
trainingx2$feature = trainingx2[,name]
#aprop= na.omit(BV.HSIdentical.df[,c(name,41,39,37,38,40,36,42)])
if( "feature" %in% colnames(BV.HSIdentical.df)){
BV.HSIdentical.df = BV.HSIdentical.df %>% dplyr::select(-feature)
}
nameCol = paste0(name)
BV.HSIdentical.df = data.frame(BV.HSIdentical.df)
BV.HSIdentical.df$feature = BV.HSIdentical.df[,name]
#trainingx2 = na.omit(trainingx2[,c(name,41,39,37,38,40,36,42)]) #yield = 22, plt.height=13, ear=10
# data=foreach(i=(1:nrow(data)),.packages=c("tidyverse"),.export=c("str_detect"),.combine=rbind,.inorder=F) %dopar% {
#   a=cov1(data=data[i,])
#   a
# }
markerList = list()
markerSelect = function(trainingx2 ,markerList )
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, i], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
if(sumMarkerLmPvalue <= .05){
cat(i,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
return(i)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
markerSelect = function(trainingx2 ,markerList ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, i], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
if(sumMarkerLmPvalue <= .05){
cat(i,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
return(i)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
data=foreach(i=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
a = markerSelect(trainingx2 = trainingx2,markerList=markerList )
a
}
colnames(trainingx2)[46:ncol(trainingx2)]
length(colnames(trainingx2)[46:ncol(trainingx2)] )
3006*7
3006*8
markerSelect = function(trainingx2 ,markerList,i ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, i], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, i]"])
if(sumMarkerLmPvalue <= .05){
cat(i,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
return(i)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
rm(data)
gc()
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
if(sumMarkerLmPvalue <= .05){
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
j="PZE.103159840"
a = markerSelect(trainingx2 = trainingx2,markerList=markerList,j=j )
a
markerData=foreach(i=colnames(trainingx2)[46:ncol(trainingx2)] ,.packages=c("stats"),
.export=c("lm"),.combine=rbind,.inorder=F) %dopar% {
a = markerSelect(trainingx2 = trainingx2,markerList=markerList,j=j )
a
}
markerSelect = function(trainingx2 ,markerList,j ){
markerLm = stats::lm(feature ~ field + ID + female + male + hetgrp + Year + variety + PC1 +
PC2 + PC3 + trainingx2[, j], data = trainingx2)
sumMarkerLm = summary(markerLm)
sumMarkerLmPvalue=as.numeric(sumMarkerLm$coefficients[ ,"Pr(>|t|)"]["trainingx2[, j]"])
if(sumMarkerLmPvalue <= .05){
cat(j,": P-value is ",sumMarkerLmPvalue,"\n" )
#markerList[[length(markerList)+1]] == i
return(j)
}
rm(markerLM,sumMarkerLm,sumMarkerLmPvalue )
gc()
}
stopCluster(cl)
